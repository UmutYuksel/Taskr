@model IEnumerable<GorevYonetimSistemi.Web.ViewModels.UserDutyViewModel>

<div class="mt-16 ml-2 mr-2 container">
    <div
        class="relative overflow-x-auto shadow-md sm:rounded-lg bg-white rounded-lg dark:bg-darkContent-800 dark:border-darkContent-700">
        <div
            class="px-4 py-4 space-x-2 flex items-center justify-normal bg-white dark:bg-darkContent-800 border-b dark:border-darkAccent-500 border-darkAccent-700">
            <h2 class="px-4 text-lightText dark:text-darkText">User Tasks</h2>
            <button
                class="bg-darkAccent-500 hover:bg-darkAccent-700 text-white font-semibold px-1 py-1 rounded focus:outline-none focus:ring-2 focus:ring-darkAccent-500">
                <a href="@Url.Action("Create","Duty")" class="px-4 py-4">New Task</a>
            </button>
            <button
                class="bg-darkAccent-500 hover:bg-darkAccent-700 text-white font-semibold px-1 py-1 rounded focus:outline-none focus:ring-2 focus:ring-darkAccent-500">
                <a href="@Url.Action("Create","UserDuty")" class="px-4 py-4">New User Assign</a>
            </button>
            @if (TempData["Error Message"] != null)
            {
                <div class="text-red-500">
                    @TempData["Error Message"]
                </div>
            }
        </div>
        <!-- Table Wrapper with fixed height and scrollable body -->
        <div class="overflow-y-auto max-h-[400px] lg:max-h-[500px]">
            @if (Model != null && Model.Any())
            {
                <table class="w-full text-sm text-gray-900 dark:text-darkText">
                    <thead
                        class="h-10 text-l text-gray-900 dark:text-darkText uppercase bg-gray-50 dark:bg-darkContent-500 sticky top-0 z-10">
                        <tr>
                            <th scope="col" class="px-2 md:px-6 py-1 md:py-3 text-center">Task title</th>
                            <th scope="col" class="px-2 md:px-6 py-1 md:py-3 text-center">Task progress</th>
                            <th scope="col" class="px-2 md:px-6 py-1 md:py-3 text-center">Created Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var userDuty in Model)
                        {
                            <tr class="overflow-y-auto max-h-10 bg-white dark:bg-darkContent-800 hover:bg-gray-50 dark:hover:bg-gray-600 cursor-pointer"
                                onclick='openViewModal(@Html.Raw(Json.Serialize(userDuty)))'>
                                <td class="px-2 md:px-6 py-2 md:py-6 text-center">@userDuty.DutyTitle</td>
                                <td class="px-2 md:px-6 py-2 md:py-6 text-center">@userDuty.DutyProgressDisplay</td>
                                <td class="px-2 md:px-6 py-2 md:py-6 text-center">@userDuty.DutyCreatedDate.ToString("dd.MM.yyyy HH:mm")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="alert alert-warning" role="alert">
                    No user duties available.
                </div>
            }

            @if (TempData["Error Message"] != null)
            {
                <div class="alert alert-danger" role="alert">
                    @TempData["Error Message"]
                </div>
            }
        </div>
    </div>
</div>


<!-- Duty Modal -->
<div id="viewModal" class="fixed inset-0 z-50 flex items-center justify-center bg-gray-900 bg-opacity-50 hidden">
    <div class="bg-white dark:bg-darkContent-800 p-8 rounded-lg w-[400px] sm:w-[600px] md:w-[800px] lg:w-[1200px]">
        <div class="flex justify-between items-center mb-6">
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Task Information</h2>
            <button type="button" class="text-gray-500 dark:text-gray-400" onclick="closeModal()">
                <span class="text-3xl">&times;</span>
            </button>
        </div>

        <!-- UserDuty Information -->
        <div class="space-y-4">
            
            <p class="text-gray-600 dark:text-gray-300"><strong>Title:</strong> <span id="DutyTitle"></span></p>
            <p class="text-gray-600 dark:text-gray-300"><strong>Description:</strong> <span id="DutyDescription"></span>
            </p>
            <p class="text-gray-600 dark:text-gray-300"><strong>Progress:</strong> <span id="DutyProgress"></span></p>
            <p class="text-gray-600 dark:text-gray-300"><strong>Created Date:</strong> <span
                    id="DutyCreatedDate"></span></p>
        </div>

        <!-- Users Assigned to Duty -->
        <div class="mt-6">
            <h3 class="text-xl font-semibold text-gray-900 dark:text-white pb-2">Users Assigned to Task</h3>
            <div class="overflow-y-auto max-h-[200px]">
                <table class="w-full text-sm text-gray-900 dark:text-darkText">
                    <thead
                        class="h-10 text-l text-gray-900 dark:text-darkText uppercase bg-gray-50 dark:bg-darkContent-500 sticky top-0 z-10">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-center">Username</th>
                            <th scope="col" class="px-6 py-3 text-center">Email</th>
                            <th scope="col" class="px-6 py-3 text-center">Role</th>
                        </tr>
                    </thead>
                    <tbody id="usersTable">
                        <!-- User rows will be inserted here dynamically -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>



<script>
    function openViewModal(userDuty) {
        // UserDuty bilgilerini modal içinde göster
        document.getElementById("DutyTitle").innerText = userDuty.dutyTitle;
        document.getElementById("DutyDescription").innerText = userDuty.dutyDescription;
        document.getElementById("DutyProgress").innerText = userDuty.dutyProgress;
        document.getElementById("DutyCreatedDate").innerText = new Date(userDuty.dutyCreatedDate).toLocaleString('tr-TR', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            hour12: false
        });


        // Kullanıcıları tabloya ekle
        const usersTable = document.getElementById("usersTable");
        usersTable.innerHTML = ''; // Önceki satırları temizle

        // userDuty.users.$values dizisini kontrol et
        if (userDuty.users && Array.isArray(userDuty.users.$values)) {
            userDuty.users.$values.forEach(user => {
                const row = document.createElement("tr");
                row.classList.add("bg-white", "dark:bg-darkContent-800", "hover:bg-gray-50", "dark:hover:bg-gray-600");

                const usernameCell = document.createElement("td");
                usernameCell.classList.add("px-6", "py-4", "text-center");
                usernameCell.innerText = user.username;
                row.appendChild(usernameCell);

                const emailCell = document.createElement("td");
                emailCell.classList.add("px-6", "py-4", "text-center");
                emailCell.innerText = user.email;
                row.appendChild(emailCell);

                const roleCell = document.createElement("td");
                roleCell.classList.add("px-6", "py-4", "text-center");
                roleCell.innerText = user.role === 1 ? "Admin" : "User";
                row.appendChild(roleCell);

                usersTable.appendChild(row);
            });
        } else {
            console.log("users dizisi geçerli bir dizi değil: ", userDuty.users);
        }

        // Modal'ı aç
        document.getElementById("viewModal").classList.remove("hidden");
    }

    function closeModal() {
        document.getElementById("viewModal").classList.add("hidden");
    }
</script>
